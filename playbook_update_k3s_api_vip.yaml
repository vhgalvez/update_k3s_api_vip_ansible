---
- name: Configurar K3s con VIP 10.17.15.10
  hosts: all
  become: true
  gather_facts: false

  vars:
    vip_ip: "10.17.15.10"
    k3s_service_path: "/etc/systemd/system/k3s.service"
    agent_service_path: "/etc/systemd/system/k3s-agent.service"
    kubeconfig_path: "/etc/rancher/k3s/k3s.yaml"
    primer_master: "{{ groups['masters'][0] }}"

  tasks:
    # --- Configurar VIP en el primer master ---
    - name: Asignar IP VIP al primer master
      raw: |
        ip addr add {{ vip_ip }}/24 dev eth0 || true
      when: inventory_hostname == primer_master

    # --- Actualizar servicio K3s en todos los masters ---
    - name: Asegurar TLS SAN en masters
      raw: |
        sed -i 's|^ExecStart=.*|& --tls-san {{ vip_ip }}|' {{ k3s_service_path }}
      when: inventory_hostname in groups['masters']

    # --- Eliminar certificados antiguos ---
    - name: Eliminar certificados antiguos
      raw: |
        rm -rf /var/lib/rancher/k3s/server/tls
      when: inventory_hostname in groups['masters']

    # --- Corregir kubeconfig para usar VIP ---
    - name: Corregir kubeconfig para usar VIP
      raw: |
        sed -i 's|server: https://127.0.0.1:6443|server: https://{{ vip_ip }}:6443|' {{ kubeconfig_path }}
      when: inventory_hostname in groups['masters']

    # --- Actualizar endpoint en agentes ---
    - name: Actualizar endpoint en agentes
      raw: |
        sed -i 's|--server https://\S+|--server https://{{ vip_ip }}:6443|' {{ agent_service_path }}
      when: inventory_hostname not in groups['masters']

    # --- Verificaci칩n de certificados ---
    - name: Verificar si los certificados se regeneraron correctamente
      raw: |
        [ -d /var/lib/rancher/k3s/server/tls ]
      register: cert_check
      failed_when: cert_check.rc != 0

    # --- Verificar si K3s y K3s-agent est치n activos ---
    - name: Verificar si K3s est치 activo
      raw: |
        systemctl is-active k3s
      register: k3s_status
      failed_when: k3s_status.stdout != 'active'

    - name: Verificar si K3s-agent est치 activo
      raw: |
        systemctl is-active k3s-agent
      register: k3s_agent_status
      failed_when: k3s_agent_status.stdout != 'active'

    # --- Pausa para asegurarse de que los servicios se reinicien correctamente ---
    - name: Esperar 1 minuto para que los servicios se reinicien
      pause:
        minutes: 1

    # --- Verificar API en VIP ---
    - name: Verificar API en VIP
      uri:
        url: "https://{{ vip_ip }}:6443/version"
        validate_certs: no
        status_code: 200
      register: api_check
      until: api_check.status == 200
      retries: 10
      delay: 10
      when: inventory_hostname == primer_master

    # --- Reiniciar K3s al final ---
    - name: Reiniciar K3s con timeout extendido
      raw: |
        systemctl restart k3s
      when: inventory_hostname in groups['masters']

    - name: Reiniciar k3s-agent
      raw: |
        systemctl restart k3s-agent
      when: inventory_hostname not in groups['masters']