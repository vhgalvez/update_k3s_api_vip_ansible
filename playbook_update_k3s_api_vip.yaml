---
- name: "Actualizar K3s para usar la IP VIP"
  hosts: all
  become: true
  gather_facts: false

  vars:
    vip_ip: "{{ api_vip | default('10.17.5.10') }}"
    kubeconfig_path: "/etc/rancher/k3s/k3s.yaml"
    k3s_service_path: "/etc/systemd/system/k3s.service"
    agent_service_path: "/etc/systemd/system/k3s-agent.service"
    primer_master: "{{ groups['masters'][0] }}"

  tasks:

    # --- FASE 1: Primer master ---
    - name: "üîß Fase 1: A√±adir --tls-san al primer master"
      raw: |
        grep -q -- "--tls-san {{ vip_ip }}" {{ k3s_service_path }} || \
        sed -i "/ExecStart=/ s|\(--tls-san [^ ]\+\)|\1 --tls-san {{ vip_ip }}|" {{ k3s_service_path }}
      when: inventory_hostname == primer_master

    - name: "Eliminar --advertise-address del primer master (si existe)"
      raw: |
        sed -i "/ExecStart=/ s| --advertise-address [^ ]*||" {{ k3s_service_path }}
      when: inventory_hostname == primer_master

    - name: "Eliminar certificados TLS en el primer master"
      raw: |
        rm -rf /var/lib/rancher/k3s/server/tls
        rm -rf /var/lib/rancher/k3s/server/db/etcd-tmp
      when: inventory_hostname == primer_master

    - name: "Reiniciar K3s en el primer master"
      raw: |
        systemctl daemon-reexec
        systemctl daemon-reload
        systemctl restart k3s
      when: inventory_hostname == primer_master

    - name: "Esperar a que la API est√© disponible por VIP"
      raw: |
        for i in $(seq 1 60); do
          curl -k --max-time 1 https://{{ vip_ip }}:6443/version >/dev/null 2>&1 && exit 0
          sleep 1
        done
        echo "‚ùå La API en {{ vip_ip }}:6443 no respondi√≥ en 60s"
      when: inventory_hostname == primer_master

    # --- FASE 2: Agentes (workers y storage) ---
    - name: "Modificar k3s-agent para usar la VIP"
      raw: |
        sed -i "s|--server https://[^ ]\+|--server https://{{ vip_ip }}:6443|" {{ agent_service_path }}
      when: inventory_hostname not in groups['masters']

    - name: "Reiniciar k3s-agent"
      raw: |
        systemctl daemon-reexec
        systemctl daemon-reload
        systemctl restart k3s-agent
      when: inventory_hostname not in groups['masters']

    - name: "Verificar que k3s-agent est√° activo"
      raw: |
        systemctl is-active k3s-agent || echo "‚ùå El agente k3s no est√° activo"
      when: inventory_hostname not in groups['masters']

    # --- FASE 2: Resto de masters ---
    - name: "A√±adir --tls-san en los dem√°s masters"
      raw: |
        grep -q -- "--tls-san {{ vip_ip }}" {{ k3s_service_path }} || \
        sed -i "/ExecStart=/ s|\(--tls-san [^ ]\+\)|\1 --tls-san {{ vip_ip }}|" {{ k3s_service_path }}
      when: inventory_hostname in groups['masters'] and inventory_hostname != primer_master

    - name: "Eliminar certificados TLS en los dem√°s masters"
      raw: |
        rm -rf /var/lib/rancher/k3s/server/tls
        rm -rf /var/lib/rancher/k3s/server/db/etcd-tmp
      when: inventory_hostname in groups['masters'] and inventory_hostname != primer_master

    - name: "Reiniciar K3s en los dem√°s masters"
      raw: |
        systemctl daemon-reexec
        systemctl daemon-reload
        systemctl restart k3s
      when: inventory_hostname in groups['masters'] and inventory_hostname != primer_master

    # --- Verificaci√≥n final ---
    - name: "Verificar si kubeconfig usa la VIP (si existe)"
      raw: |
        if [ -f "{{ kubeconfig_path }}" ]; then
          grep 'server: https://{{ vip_ip }}:6443' "{{ kubeconfig_path }}" || echo "‚ùå kubeconfig sin VIP"
        else
          echo "‚ö†Ô∏è No existe kubeconfig (normal en agentes)"
        fi
      register: resultado_kubeconfig
      changed_when: false

    - name: "Mostrar resultado final"
      debug:
        var: resultado_kubeconfig.stdout_lines