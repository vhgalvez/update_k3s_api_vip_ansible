---
- name: Reemplazar endpoint API por IP VIP y reiniciar K3s
  hosts: k8s_cluster
  become: true
  gather_facts: false

  vars:
    vip_ip: "10.17.5.10"
    kubeconfig_path: "/etc/rancher/k3s/k3s.yaml"
    k3s_service_path: "/etc/systemd/system/k3s.service"

  tasks:
    - name: Asegurar que el kubeconfig apunte a la VIP (solo en masters)
      raw: |
        sed -i 's|server: https://127.0.0.1:6443|server: https://{{ vip_ip }}:6443|' {{ kubeconfig_path }}
      when: inventory_hostname in groups['masters']

    - name: Regenerar servicio systemd con VIP y sin duplicados (solo masters)
      raw: |
        node_ip=$(hostname -I | awk '{print $1}')
        cat <<EOF > {{ k3s_service_path }}
[Unit]
Description=Lightweight Kubernetes
Documentation=https://k3s.io
After=network.target

[Service]
Type=exec
ExecStartPre=-/sbin/modprobe br_netfilter
ExecStartPre=-/sbin/modprobe overlay
ExecStart=/opt/bin/k3s server \
  --cluster-init \
  --tls-san ${node_ip} \
  --tls-san {{ vip_ip }} \
  --write-kubeconfig /etc/rancher/k3s/k3s.yaml \
  --write-kubeconfig-mode 644
Restart=always
KillMode=process
Delegate=yes
LimitNOFILE=1048576
LimitNPROC=infinity

[Install]
WantedBy=multi-user.target
EOF
      when: inventory_hostname in groups['masters']

    - name: Eliminar certificados TLS para regenerarlos con la nueva VIP (solo masters)
      raw: rm -rf /var/lib/rancher/k3s/server/tls/*
      when: inventory_hostname in groups['masters']

    - name: Recargar y reiniciar k3s (solo masters)
      raw: |
        systemctl daemon-reexec
        systemctl daemon-reload
        systemctl restart k3s
      when: inventory_hostname in groups['masters']

    - name: Asegurar que el kubeconfig apunte a la VIP en workers y storage
      raw: |
        sed -i 's|server: https://127.0.0.1:6443|server: https://{{ vip_ip }}:6443|' {{ kubeconfig_path }}
      when: inventory_hostname in groups['workers'] or inventory_hostname in groups['storage']

    - name: Verificar si el archivo k3s.yaml tiene la VIP (todos los nodos)
      raw: |
        grep 'server: https://{{ vip_ip }}:6443' {{ kubeconfig_path }} || echo "❌ El archivo no fue modificado correctamente"
      register: check_kubeconfig
      changed_when: false

    - name: Mostrar resultado de verificación
      debug:
        var: check_kubeconfig.stdout_lines