---
- name: Actualizar K3s para usar la IP VIP en todos los nodos
  hosts: k8s_cluster
  become: true
  gather_facts: false

  vars:
    vip_ip: "10.17.5.10"
    kubeconfig_path: "/etc/rancher/k3s/k3s.yaml"
    k3s_service_path: "/etc/systemd/system/k3s.service"

  tasks:
    - name: Cambiar endpoint en kubeconfig a la VIP (todos los nodos)
      raw: |
        if grep -q "server: https://127.0.0.1:6443" "{{ kubeconfig_path }}"; then
          sed -i 's|server: https://127.0.0.1:6443|server: https://{{ vip_ip }}:6443|' "{{ kubeconfig_path }}"
        fi
      when: ansible_host is defined

    - name: Añadir --tls-san {{ vip_ip }} en masters si no existe
      raw: |
        grep -q -- "--tls-san {{ vip_ip }}" "{{ k3s_service_path }}" || \
        sed -i "/ExecStart=/ s|\\(--tls-san [^ ]\\+\\)|\\1 --tls-san {{ vip_ip }}|" "{{ k3s_service_path }}"
      when: inventory_hostname in groups['masters']

    - name: Eliminar certificados TLS en masters para regeneración con VIP
      raw: "rm -rf /var/lib/rancher/k3s/server/tls"
      when: inventory_hostname in groups['masters']

    - name: Recargar systemd y reiniciar K3s (solo masters)
      raw: |
        systemctl daemon-reexec
        systemctl daemon-reload
        systemctl restart k3s
      when: inventory_hostname in groups['masters']

    - name: Esperar a que el API esté disponible en la VIP (máximo 60s)
      raw: |
        timeout=60
        while ! curl -sk https://{{ vip_ip }}:6443/version &>/dev/null; do
          echo "Esperando que el API esté disponible..."
          sleep 2
          timeout=$((timeout-2))
          [ $timeout -le 0 ] && echo "⛔️ Tiempo de espera agotado" && exit 1
        done
      when: inventory_hostname in groups['masters'][0]  # Solo lo hace una vez

    - name: Verificar que el kubeconfig usa la VIP
      raw: |
        grep 'server: https://{{ vip_ip }}:6443' "{{ kubeconfig_path }}" || echo "❌ El archivo no fue modificado correctamente"
      register: check_kubeconfig
      changed_when: false

    - name: Mostrar resultado
      debug:
        var: check_kubeconfig.stdout_lines